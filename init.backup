;; This sets up the load path so that we can override it
;; reference
;; https://hristos.triantafillou.us/init.el/
;; http://y.tsutsumi.io/emacs-from-scratch-part-2-package-management.html

;; utf-8 encoding
(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)

(defconst *is-a-mac* (eq system-type 'darwin))

(package-initialize)

(add-to-list 'load-path "~/.emacs.d")
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file)

(setq user-full-name "Sampath Singamsetty"
      user-mail-address "Singamsetty.Sampath@gmail.com")


;; Use M-x package-refresh-contents to reload the list of
;; packages after adding these for the first time
(setq package-archives '(("gnu"       . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa"     . "http://melpa.milkbox.net/packages/")))

;; packages to be installed
(defvar my/install-packages
  '(;; appearance
    powerline

    ;; essential
    buffer-move
    company
    company-jedi

    ; smex
    rainbow-delimiters
    rainbow-mode
    rainbow-identifiers
    auto-complete
    ido

    ;; utilities
    smartparens

    ;; language specific
    markdown-mode
    ;; auctex
    ;; installed)

    ;; python
    jedi

    ;; python epc

    ;; flycheck
    flycheck

    ;; org-mode
    org-bullets

    ;; Yasnippets package
    yasnippet

    diminish
  )
  "A list of packages that will be installed if not present when firing Emacs")

;; Define a top-level, vendor and custom files
; (defvar emacs-dir (file-name-directory load-file-name)
;   "Top level Emacs dir.")
; (defvar emacs-dir (file-name-directory "~/.emacs.d")
;   "Top level Emacs dir.")
; (defvar vendor-dir (expand-file-name "vendor" emacs-dir)
;   "Packages not yet available in ELPA.")
; (defvar module-dir (expand-file-name "modules" emacs-dir)
;   "Personal stuff.")
; (defvar save-dir (expand-file-name "cache" emacs-dir)
;   "Common place to save Emacs save/history-files.")

(defvar module-dir (expand-file-name "~/.emacs.d/modules")
  "custom modules directory")
(defvar vendor-dir (expand-file-name "~/.emacs.d/vendor")
  "manually installed packages")
(defvar save-dir (expand-file-name "~/.emacs.d/cache")
  "place for storing history")

;; Add the above to the load-path
(unless (file-exists-p save-dir)
  (make-directory save-dir))
(add-to-list 'load-path vendor-dir)
(add-to-list 'load-path module-dir)

;; Requires packages in the modules/ directory
(mapc 'load (directory-files module-dir nil "^[^#].*el$"))

; (defun uninstalled-packages (packages)
;   (delq nil
;         (mapcar (lambda (p)
;                   (if (package-installed-p p nil) nil p))
;                 packages)))

; (let ((to-be-installed
;        (uninstalled-packages my/install-packages))
;   (when to-be-installed
;     (progn
;       (package-refresh-contents)
;       (dolist (p to-be-installed)
;         (package-install p)))))


(if (not (package-installed-p 'use-package))
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))

(require 'use-package)

(defvar packages-refreshed? nil)

(dolist (pack my/install-packages)
  (unless (package-installed-p pack)
    (unless packages-refreshed?
      (package-refresh-contents)
      (setq packages-refreshed? t))
    (package-install pack)))

;;--------------------------------------
;; use packages
;;--------------------------------------

;; Diminished modes are minor modes with no modeline display
;; http://www.eskimo.com/~seldon/diminish.el
(require 'modules-diminish)
; (use-package diminish
;   :ensure t
;   :config
;   (progn
;     (eval-after-load "whitespace" '(diminish 'whitespace-mode))))

(use-package company
  :ensure t
  :config
  (global-company-mode t))

(use-package company-jedi
  :ensure t)

(use-package markdown-mode
  :ensure t
  :init (setq auto-mode-alist
              (cons '("\\.mdml$" . markdown-mode) auto-mode-alist)))

;;
;; for rainbow delimiters
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  )

;;
;; for rainbow identifiers
(use-package rainbow-identifiers
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
  )

;;
;; rainbow mode
(use-package rainbow-mode
  :ensure t
  :unless (string-prefix-p "example.com" (system-name))
  :diminish rainbow-mode
  :config
  (add-hook 'prog-mode-hook 'rainbow-mode)
  )

;; auto-completion
(use-package auto-complete
  :ensure t)

;; smart parenthesis matching
(use-package smartparens
  :diminish smartparens-mode
  :ensure t
  :config
  (setq
   sp-base-key-bindings 'paredit
   sp-autoskip-closing-pair 'always
   sp-hybrid-kill-entire-symbol nil)
  (sp-use-paredit-bindings)
  (show-smartparens-global-mode +1)
  (smartparens-global-mode 1))

;; Syntax checking for GNU Emacs - http://www.flycheck.org/
(use-package flycheck
  :ensure t
  :bind
  (("C-c e n" . flycheck-next-error)
   ("C-c e p" . flycheck-previous-error))
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))

(use-package buffer-move
  :ensure t
  :config
  (global-set-key (kbd "<S-s-up>")     'buf-move-up)
  (global-set-key (kbd "<S-s-down>")   'buf-move-down)
  (global-set-key (kbd "<S-s-left>")   'buf-move-left)
  (global-set-key (kbd "<S-s-right>")  'buf-move-right)
  )

(use-package powerline
  :ensure t
  :config
  (powerline-default-theme)
  )

(use-package yasnippet
  :ensure t
  )

;;
;; yasnippets configuration
;; This will install and activate it everywhere.
;; Your snippets are stored in ~/.emacs.d/snippets.
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/")
(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/yasnippet-snippets")
(yas-global-mode 1)
; (yas/load-directory "~/.emacs.d/snippets"))
; (setq yas/indent-line nil)
; (yas-global-mode 1)

;;
;; auto-complete
;;
(require 'auto-complete)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(require 'auto-complete-config)
(ac-config-default)
(global-auto-complete-mode t)
; (setq ac-sources '(ac-source-yasnippet
;                    ac-source-abbrev
;                    ac-source-words-in-same-mode-buffers))
;; show the menu
(setq ac-show-menu-immediately-on-auto-complete t)

;;
;; python JEDI IDE
;;
(use-package jedi
  :ensure t
  )


;; Start auto-complete and jedi for refactoring
(setq flymake-log-level 3)

(require 'jedi)
;; Hook up to autocomplete
; (add-to-list ’ac-sources ’ac-source-jedi-direct)
(autoload 'jedi:setup "jedi" nil t)
;; enable python-mode
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi-config:set-python-executable "/usr/local/bin/python3")
(setq jedi:setup-keys t)
(setq jedi:complete-on-dot t)
; hack to never show in-function call automatically
(setq jedi:get-in-function-call-delay 300)
(setq jedi:server-command (list "/usr/local/bin/python3" jedi:server-script))
(jedi-mode 1)
(setq jedi:environment-root "env")
; (setq jedi:environment-virtualenv
;   (append python-environment-virtualenv
;     '(' "--python" "/usr/local/bin/python3")))

(defun jedi-config:setup-keys ()
       (local-set-key (kbd "M-.") 'jedi:goto-definition)
       (local-set-key (kbd "M-,") 'jedi:goto-definition-pop-marker)
       (local-set-key (kbd "M-?") 'jedi:show-doc)
       (local-set-key (kbd "M-/") 'jedi:get-in-function-call))
(add-hook 'python-mode-hook 'jedi-config:setup-keys)

(setq py-python-command "/usr/local/bin/python3")
(setq python-shell-interpreter "/usr/local/bin/ipython3")
(setq python-check-command "/usr/local/bin/pyflakes")
(setq python-environment-directory "~/.emacs.d/.python-environments")


; set PATH, because we don't load .bashrc
(setenv
 "PATH" (concat
   "$HOME/bin:"
   "/bin:"
   "/usr/bin:"
   "/sbin:"
   "/usr/sbin:"
   "/usr/local/bin:"
   "/usr/local/sbin"))

; Set PYTHONPATH, because we don't load .bashrc
(setenv "PYTHONPATH" "/usr/local/lib/python3.5/site-packages:")

;;
;;
;;

;; smartparens load config
; (require 'smartparens-lisp)

;;
;; org bullets for markdown
(use-package org-bullets
  :ensure t
  :init
  (setq org-bullets-bullet-list
        '("◉" "◎" "⚫" "○" "►" "◇"))
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
(setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
(sequence "⚑ WAITING(w)" "|")
(sequence "|" "✘ CANCELED(c)")))

;;
;; ido settings
(use-package ido
  :ensure t
  :config
  (ido-mode t)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (setq ido-max-prospects 50)
  (setq ido-max-window-height 0.25)
  )

; (when window-system
;   (tooltip-mode -1)
;   (tool-bar-mode -1)
;   (menu-bar-mode 1)
;   (scroll-bar-mode 1))

(global-set-key (kbd "<C-S-up>")     'windmove-up)
(global-set-key (kbd "<C-S-down>")   'windmove-down)
(global-set-key (kbd "<C-S-left>")   'windmove-left)
(global-set-key (kbd "<C-S-right>")  'windmove-right)

(global-set-key (kbd "<menu>") 'nil)


;;********************************************************
;; some customizations
;;********************************************************
(show-paren-mode t)

(recentf-mode 1)

(global-set-key "\M- " 'hippie-expand)

(setq truncate-lines t)
(add-hook 'minibuffer-setup-hook
      (lambda () (setq truncate-lines nil)))

(setq kill-emacs-query-functions
      (cons (lambda () (yes-or-no-p "Do you want to Quit Aquamacs? "))
            kill-emacs-query-functions))

(put 'upcase-region 'disabled nil)

(desktop-save-mode 1)
(setq desktop-restore-eager 10)
(setq desktop-save t) ;; save without asking

(defalias 'list-buffers 'ibuffer)

; (electric-pair-mode 1)
; (defvar markdown-electric-pairs '((?* . ?*)) "Electric pairs for markdown-mode.")
; (defun markdown-add-electric-pairs ()
;   (setq-local electric-pair-pairs (append electric-pair-pairs markdown-electric-pairs))
;   (setq-local electric-pair-text-pairs electric-pair-pairs))
; (add-hook 'markdown-mode-hook 'markdown-add-electric-pairs)

(global-set-key (kbd "<C-S-up>")     'windmove-up)
(global-set-key (kbd "<C-S-down>")   'windmove-down)
(global-set-key (kbd "<C-S-left>")   'windmove-left)
(global-set-key (kbd "<C-S-right>")  'windmove-right)

;; set default font
(setq-default-font "Monaco for Powerline")

(defun timestamp ()
  (interactive)
  (insert (format-time-string "%d.%m.%Y, %H:%M")))

(defun my-count-words-region (posBegin posEnd)
  "Print number of words and chars in region."
  (interactive "r")
  (message "Counting …")
  (save-excursion
    (let (wordCount charCount)
      (setq wordCount 0)
      (setq charCount (- posEnd posBegin))
      (goto-char posBegin)
      (while (and (< (point) posEnd)
                  (re-search-forward "\\w+\\W*" posEnd t))
        (setq wordCount (1+ wordCount)))

      (message "Words: %d. Chars: %d." wordCount charCount)
      )))

(defun unfill-paragraph ()
  "Replace newline chars in current paragraph by single spaces.
This command does the inverse of `fill-paragraph'."
  (interactive)
  (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
    (fill-paragraph nil)))
(defun unfill-region (start end)
  "Replace newline chars in region by single spaces.
This command does the inverse of `fill-region'."
  (interactive "r")
  (let ((fill-column 90002000))
    (fill-region start end)))

; (setq LaTeX-math-menu-unicode t)
; (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
; (require 'reftex)
; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
; (setq reftex-plug-into-AUCTeX t)
; (setq-default TeX-master nil)
; (setq reftex-cite-format 'natbib)

(setq auto-mode-alist
      (cons '("\\.org$" . org-mode) auto-mode-alist))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t)
