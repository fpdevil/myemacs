;;=====================================================
;;
; erlang settings for emacs
;;
;;=====================================================

; standard libraries
(require 'cl)
(require 'cl-lib)


(add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))


;;
; erlang path setup
;;
(add-to-list 'load-path "/opt/erlang/r19.0/lib/tools-2.8.4/emacs")
(setq erlang-root-dir "/opt/erlang/r19.0")
(add-to-list 'exec-path "/opt/erlang/r19.0/bin")
(setq erlang-man-root-dir "/opt/erlang/r19.0/man")
(require 'erlang-start)

; (setq load-path (cons "/opt/erlang/r19.0/lib/tools-2.8.4/emacs"
;     load-path))
;       (setq erlang-root-dir "/opt/erlang/r19.0")
;       (setq exec-path (cons "/opt/erlang/r19.0/bin" exec-path))
;       (setq erlang-man-root-dir "/opt/erlang/r19.0/man")
;       (require 'erlang-start)

;; prevent annoying hang-on-compile
(defvar inferior-erlang-prompt-timeout t)

;;
; distel setup
;;
(add-to-list 'load-path "/opt/erlang/r19.0/distel/elisp")
(require 'distel)
(distel-setup)


;;
; erlang ide set-up and
; erlang auto-completion using company distel
;;
; (require 'auto-complete-distel)
; (add-to-list 'ac-sources 'auto-complete-distel)
; (require 'company)
; (add-hook 'after-init-hook 'global-company-mode)
; (push "~/.emacs.d/vendor/distel-completion/" load-path)
; (require 'company-distel)
; (add-to-list 'company-backends 'company-distel)

; ; render company's doc-buffer (default <F1> when on a completion-candidate)
; ; in a small popup (using popup.el) instead of showing the whole help-buffer.
; (setq company-distel-popup-help t)
; ; specify the height of the help popup created by company
; (setq company-distel-popup-height 30)
; ; get documentation from internet
; (setq distel-completion-get-doc-from-internet t)



;; This code sets list of options, that will passed to Erlang process,
;; and also change key bindings for erlang-mode, and add list of defined
;; Erlang's functions into menu, generated by Imenu package
(defun my-erlang-mode-hook ()
        ;; when starting an Erlang shell in Emacs, default in the node name
        ;; default node name to emacs@localhost
        (setq inferior-erlang-machine-options '("-sname" "emacs"))
        ;; add Erlang functions to an imenu menu
        (imenu-add-to-menubar "imenu")
        ;; customize keys
        (local-set-key [return] 'newline-and-indent)
        )
;; Some Erlang customizations
; added at the bottom, so commented here
; (add-hook 'erlang-mode-hook 'my-erlang-mode-hook)


;; ref http://bob.ippoli.to/archives/2007/03/16/distel-and-erlang-mode-for-emacs-on-mac-os-x/
;; tell distel to default to that node
(setq erl-nodename-cache
      (make-symbol
       (concat
        "emacs@"
        ;; Mac OS X uses "name.local" instead of "name", this should work
        ;; pretty much anywhere without having to muck with NetInfo
        ;; ... but I only tested it on Mac OS X.
        (car (split-string (shell-command-to-string "hostname"))))))


;;
; A number of the erlang-extended-mode key bindings are useful in the shell too
;;
(defconst distel-shell-keys
  '(("\C-\M-i"   erl-complete)
    ("\M-?"      erl-complete)
    ("\M-."      erl-find-source-under-point)
    ("\M-,"      erl-find-source-unwind)
    ("\M-*"      erl-find-source-unwind)
    )
  "Additional keys to bind when in Erlang shell.")


(add-hook 'erlang-shell-mode-hook
    (lambda()
        ;; add some Distel bindings to the Erlang shell
        (dolist (spec distel-shell-keys)
            (define-key erlang-shell-mode-map (car spec) (cadr spec)))))


;;
; on the fly source code checking through flymake
;;
(require 'flymake)
(setq flymake-log-level 3)
(setq erlang-flymake-location "~/.emacs.d/flymake/eflymake")

(defun flymake-erlang-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
       'flymake-create-temp-inplace))
  (local-file (file-relative-name temp-file
  (file-name-directory buffer-file-name)))
     (escript-exe (concat erlang-root-dir "/bin/escript"))
  (eflymake-loc (expand-file-name erlang-flymake-location)))
  (if (not (file-exists-p eflymake-loc))
        (error "Please set erlang-flymake-location to an actual location.")
  (list escript-exe(list eflymake-loc local-file)))))
;;
; enable flymake globally
;;
; (add-hook 'find-file-hook 'flymake-find-file-hook)
;; enabling only erlang-mode
(add-to-list 'flymake-allowed-file-name-masks '("\\.erl\\'" flymake-erlang-init))
(defun flymake-erlang-mode-hook ()
        (flymake-mode 1))
(add-hook 'erlang-mode-hook 'flymake-erlang-mode-hook)