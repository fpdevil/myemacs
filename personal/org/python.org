#+TITLE: Using Org mode Examples in Python Code
#+AUTHOR: Sampath Singamsetty
#+EMAIL: Singamsetty.Sampath@gmail.com
#+STARTUP: indent
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS: author:nil email:nil creator:nil timestamp:nil
#+OPTIONS: d:t
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LANGUAGE: en
#+TAGS: noexport(n) Emacs(E) Python(P) Ruby(R) Clojure(C) Elasticsearch(ES)
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="./css/worg.css" type="text/css" />
#+XSLT:

* Export keys

Org-mode offers a command to produce a PDF file from the LaTeX
export. This is bound to C-c C-e p. The command C-c C-e d does all
this and opens the PDF file in the default reader.

C-C C-e brings up export menu

C-c C-e l p to create a pdf from the org-document

C-c C-e l o to create a pdf from the org document and open it

** export the current buffer to PDF with any latex rendered properly

M-x: org-latex-export-to-pdf

\begin{equation}
b=\sqrt{b}
\end{equation}

** export the current buffer to HTML with any latex rendered properly

M-x: org-html-export-to-html

\begin{equation}
b=\sqrt{b}
\end{equation}

* debugging commands

** references

https://docs.python.org/3/library/index.html

* working with python code blocks
:PROPERTIES:
:ID:
:PUBDATE:
:END:
** Interacting with python
:PROPERTIES:
:ID:
:PUBDATE:
:END:


#+tblname: delsee
| airmass | zenith_seeing | delivered_seeing |
|---------+--------------+-----------------|
|     1.3 |         0.95 |       1.1119612 |
|     1.3 |          1.0 |       1.1704854 |
|     1.3 |          1.1 |       1.2875340 |
|     1.3 |          1.2 |       1.4045825 |
#+TBLFM: $3=$2*($1**0.6)

#+begin_src python :var delsee=delsee :results output :exports both
  print(delsee)
#+end_src

#+RESULTS:
: [[1.3, 0.95, 1.1119612], [1.3, 1.0, 1.1704854], [1.3, 1.1, 1.287534], [1.3, 1.2, 1.4045825]]

** Plotting with python
:PROPERTIES:
:ID:
:PUBDATE:
:END:

#+tblname: delsee
| airmass | zenith_seeing | delivered_seeing |
|---------+---------------+------------------|
|     1.3 |          0.95 |        1.1119612 |
|     1.3 |           1.0 |        1.1704854 |
|     1.3 |           1.1 |        1.2875340 |
|     1.3 |           1.2 |        1.4045825 |
#+TBLFM: $3=$2*($1**0.6)


#+begin_src python :var fname="delseepy.png" :var delsee=delsee :results file :exports both
  import matplotlib.pyplot as plt

  x, y, z = zip(*delsee)

  fig = plt.figure()
  axes = fig.add_subplot(1,1,1)
  axes.plot(y, z, marker='o')
  fig.savefig(fname)

  return fname
#+end_src

#+RESULTS:
[[file:delseepy.png]]

** More plotting
:PROPERTIES:
:ID:
:END:
#+begin_src python :results file :exports both
import matplotlib, numpy
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig('python-matplot-fig.png')
return 'python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:python-matplot-fig.png]]

Note: you can export this document with the plot graphic with:

~org-latex-export-to-pdf~

** Extracting data from an org-mode table
:PROPERTIES:
:ID:
:END:
#+tblname: data_table
| a | 1 |
| b | 2 |
| c | 3 |
#+begin_src python :var index=1 :var data=data_table
# Return row specified by val.
# In non-session mode, use return to return results.
return(data[index])
#+end_src

#+RESULTS:
| b | 2 |

** Creating and calling code blocks
:PROPERTIES:
:ID:
:END:

:PROPERTIES:
:ID:
:END:

Here's a source block that executes automatically (modulo security)
when we say ~M-x org-latex-export-to-pdf~

#+Name: square
#+header: :var x=0
#+begin_src python :exports code
  return x*x
#+end_src

#+call: square(7)

** Emitting output and feeding input
:PROPERTIES:
:ID:
:END:

Here's a block to generate a value
#+name: get_value
#+header: :var x=4
#+begin_src python :exports code
  # x = 4
  return 3 + x
#+end_src

Here's a block that consumes the value
#+name: square
#+header: :var x=call: get_value :exports both
#+begin_src python :exports code
  return x*x
#+end_src

#+RESULTS: square
: 49
