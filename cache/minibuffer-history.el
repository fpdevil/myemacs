;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(evil-ex-history helm-M-x-input-history minibuffer-history))
(setq evil-ex-history '(#("ls" 0 1 (ex-index 1) 1 2 (ex-index 2))))
(setq helm-M-x-input-history '(#("package" 0 7 (fontified t line-prefix #("    " 0 3 (face org-indent)) wrap-prefix #("    " 0 3 (face org-indent) 3 4 (face org-indent)))) "chan"))
(setq minibuffer-history '("org-con" "org-support-shift-select" "mat" "c"))
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
(setq kill-ring '(#("t" 0 1 (fontified t face (highlight-symbol-face))) "org-support-shift-select" "#+LaTeX_HEADER: \\lstset{basicstyle=\\scriptsize\\ttfamily}" "#+LATEX_HEADER: \\RequirePackage{fancyvrb}
#+LATEX_HEADER: \\DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\\scriptsize}" "#+LATEX_HEADER: \\usepackage{verbatim} " #("#+LaTeX_HEADER: \\usemintedstyle{monokai}
" 0 39 (face org-meta-line font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 39 40 (face org-meta-line font-lock-fontified t fontified t rear-nonsticky t yank-handler (evil-yank-line-handler nil t)) 40 41 (fontified t yank-handler (evil-yank-line-handler nil t))) "#+LATEX_HEADER: \\usepackage{minted}
#+LATEX_HEADER: \\usepackage{color}" #("#+LATEX_HEADER: \\usepackage[outputdir=Output]{minted}
" 0 2 (face org-meta-line font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 2 15 (face org-meta-line font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 15 16 (face org-meta-line font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 16 52 (face org-meta-line font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 52 53 (face org-meta-line font-lock-fontified t fontified t rear-nonsticky t yank-handler (evil-yank-line-handler nil t)) 53 54 (fontified t yank-handler (evil-yank-line-handler nil t))) "#+LaTeX_HEADER: \\usemintedstyle{monokai}" #("s" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("h" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("C" 0 1 (fontified t font-lock-fontified t src-block t lang "sh" font-lock-multiline t face (:inherit (font-lock-comment-face org-block-sh org-block)))) #("R" 0 1 (fontified t font-lock-fontified t src-block t lang "sh" font-lock-multiline t face (:inherit (font-lock-comment-face org-block-sh org-block)))) #("S" 0 1 (fontified t font-lock-fontified t src-block t lang "sh" font-lock-multiline t face (:inherit (font-lock-comment-face org-block-sh org-block)))) #("_" 0 1 (fontified t font-lock-fontified t src-block t lang "sh" font-lock-multiline t face (:inherit (font-lock-comment-face org-block-sh org-block)))) #("D" 0 1 (fontified t font-lock-fontified t src-block t lang "sh" font-lock-multiline t face (:inherit (font-lock-comment-face org-block-sh org-block)))) #("N" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (font-lock-comment-face org-block-sh org-block)) src-block t lang "sh")) #("E" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line)) #("#+BEGIN_SRC sh
" 0 1 (face (:inherit (font-lock-comment-delimiter-face org-block-sh org-block)) font-lock-multiline t lang "sh" src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1 14 (face (:inherit (font-lock-comment-face org-block-sh org-block)) font-lock-multiline t lang "sh" src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 14 15 (face (:inherit (font-lock-comment-face org-block-sh org-block)) font-lock-multiline t lang "sh" src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) ":EXPORT_LATEX_HEADER+: \\usepackage[outputdir=Output]{minted}" #("s" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("h" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("e" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("l" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("l" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line))))
